const { SlashCommandBuilder } = require("discord.js");
const { convertMarkdownText } = require("../../util");
require("dotenv").config();
const channelId = process.env.CHANNEL_ID;

module.exports = {
	cooldown: 5,
	data: new SlashCommandBuilder()
		.setName("todo")
		.setDescription("Ìï† Ïùº")
		.addSubcommand((sub) =>
			sub
				.setName("add")
				.setDescription("Ìï† Ïùº Ï∂îÍ∞Ä")
				.addStringOption((option) =>
					option
						.setName("todo")
						.setDescription("Ï∂îÍ∞ÄÌï† Ìï† Ïùº")
						.setRequired(true)
				)
		)
		.addSubcommand((sub) =>
			sub
				.setName("edit")
				.setDescription("Ìï† Ïùº ÏàòÏ†ï")
				.addStringOption((option) =>
					option
						.setName("id")
						.setDescription("ÏàòÏ†ïÌï† Ìï† ÏùºÏùò id")
						.setRequired(true)
				)
				.addStringOption((option) =>
					option
						.setName("todo")
						.setDescription("ÏàòÏ†ïÌï† Ìï† Ïùº")
						.setRequired(true)
				)
		)
		.addSubcommand((sub) =>
			sub
				.setName("delete")
				.setDescription("Ìï† Ïùº ÏÇ≠Ï†ú")
				.addStringOption((option) =>
					option
						.setName("id")
						.setDescription("ÏÇ≠Ï†úÌï† Ìï† ÏùºÏùò id")
						.setRequired(true)
				)
		)
		.addSubcommand((sub) =>
			sub
				.setName("check")
				.setDescription("Ìï† Ïùº Ï≤¥ÌÅ¨")
				.addStringOption((option) =>
					option
						.setName("id")
						.setDescription("ÏôÑÎ£åÌïú Ìï† ÏùºÏùò id")
						.setRequired(true)
				)
		),

	async execute(interaction) {
		const subCommand = interaction.options.getSubcommand();
		const channelData = await interaction.client.channels.fetch(channelId);
		const messages = await channelData.messages.fetch({ limit: 10 });

		const today = convertMarkdownText(
			"date",
			new Date().toISOString().slice(0, 10)
		);

		const todayList = messages.find(
			(list) => list.content.split("\n")[0].trim() === today.trim()
		);

		// ÏïÑÏßÅ Î™©Î°ùÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞
		if (!todayList) {
			await interaction.reply(
				convertMarkdownText("message", "Ïò§ÎäòÏùò Ìï† Ïùº Î™©Î°ùÏùÑ Î®ºÏ†Ä ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî")
			);
		}

		// ÎÇ†Ïßú Ï†úÏô∏ Î™©Î°ùÎßå
		const [date, ...todos] = todayList.content.split("\n");

		// Ï∂îÍ∞Ä
		if (subCommand === "add") {
			const todo = interaction.options.getString("todo");
			const id = Math.floor(todos.length / 2);
			const addTodo = [date, ...todos, `\nüìå ${id}. ${todo}`].join("\n");
			await todayList.edit(addTodo);
			await interaction.reply(
				convertMarkdownText("message", "Ìï† ÏùºÏùÑ Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§.")
			);
		}

		// ÏàòÏ†ï
		if (subCommand === "edit") {
			// todo : ÏûÖÎ†•Ìïú idÏùò todoÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞

			const id = interaction.options.getString("id");
			const todo = interaction.options.getString("todo");
			const targetIndex = todos.findIndex((item) => item.includes(` ${id}. `));
			const editItem = `${todos[targetIndex].slice(0, 5)} ${todo}`;
			const editTodos = [
				...todos.slice(0, targetIndex),
				editItem,
				...todos.slice(targetIndex + 1),
			];
			await todayList.edit([date, ...editTodos].join("\n"));
			await interaction.reply(
				convertMarkdownText("message", `Ìï† Ïùº#${id} ÏàòÏ†ï ÏôÑÎ£å`)
			);
		}

		// check
		if (subCommand === "check") {
			// todo : ÏûÖÎ†•Ìïú idÏùò todoÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞

			const id = interaction.options.getString("id");
			const targetIndex = todos.findIndex((item) => item.includes(` ${id}. `));
			const [emoji, todo] = todos[targetIndex].split(` ${id}. `);
			const editItem =
				emoji === "üìå" ? `‚úÖ ${id}. ~~${todo}~~` : `üìå ${id}. ${todo}`;
			const editTodos = [
				...todos.slice(0, targetIndex),
				editItem,
				...todos.slice(targetIndex + 1),
			];
			await todayList.edit([date, ...editTodos].join("\n"));
			await interaction.reply(
				convertMarkdownText("message", `Ìï† Ïùº#${id} Ï≤¥ÌÅ¨ ÏôÑÎ£å`)
			);
		}

		// ÏÇ≠Ï†ú
		if (subCommand === "delete") {
			// todo : ÏûÖÎ†•Ìïú idÏùò todoÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞

			const id = interaction.options.getString("id");
			const targetIndex = todos.findIndex((item) => item.includes(` ${id}. `));
			const editItems = todos.slice(targetIndex + 1).map((todo) => {
				if (todo) {
					const [emoji, id] = todo.slice(0, 5).split(" ");
					const convertId = +id.trim().slice(0, -1) - 1;
					return `${emoji} ${convertId}. ${todo.slice(5).trim()}`;
				}
				return "";
			});

			await todayList.edit(
				[date, ...todos.slice(0, targetIndex), ...editItems].join("\n")
			);
			await interaction.reply(
				convertMarkdownText("message", `Ìï† Ïùº#${id} ÏÇ≠Ï†ú ÏôÑÎ£å`)
			);
		}
	},
};
